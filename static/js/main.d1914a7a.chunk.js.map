{"version":3,"sources":["actions/index.jsx","reducers/index.jsx","components/AddTodo.jsx","containers/AddTodo.jsx","components/TodoList.jsx","containers/TodoList.jsx","components/TodoFilters.jsx","containers/TodoFilters.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["nextTodoId","initialState","todos","filter","AddTodo","addTodo","useState","inputValue","changeInputValue","textInput","React","createRef","useEffect","current","focus","className","type","onChange","e","target","value","onKeyPress","event","key","ref","onClick","disabled","connect","undefined","text","id","props","TodoList","toggleTodo","map","todo","style","textDecoration","completed","state","name","TodoFilters","setFilter","background","store","createStore","action","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1914a7a.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const SET_FILTER = \"SET_FILTER\";\n\nlet nextTodoId = 0;\nexport const addTodo = text => ({\n  type: ADD_TODO,\n  id: nextTodoId++,\n  text\n});\n\nexport const toggleTodo = id => ({\n  type: TOGGLE_TODO,\n  id\n});\n\nexport const setFilter = name => ({\n  type: SET_FILTER,\n  name\n});\n","import { ADD_TODO, TOGGLE_TODO, SET_FILTER } from \"../actions\";\n\nconst initialState = {\n  todos: [],\n  filter: \"all\"\n};\n\nexport const todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          {\n            text: action.text,\n            id: action.id,\n            completed: false\n          }\n        ]\n      };\n    case TOGGLE_TODO:\n      return {\n        ...state,\n        todos: [\n          ...state.todos.map(todo =>\n            todo.id === action.id\n              ? { ...todo, completed: !todo.completed }\n              : todo\n          )\n        ]\n      };\n    case SET_FILTER:\n      return {\n        ...state,\n        filter: action.name\n      };\n\n    default:\n      return state;\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./AddTodo.scss\";\n\nconst AddTodo = ({ addTodo }) => {\n  const [inputValue, changeInputValue] = useState(\"\");\n  const textInput = React.createRef();\n\n  useEffect(() => {\n    textInput.current.focus();\n  });\n\n  const handleClick = () => {\n    addTodo(inputValue);\n    changeInputValue(\"\");\n  };\n\n  const enterPressed = event => {\n    if (event.key === \"Enter\" && inputValue) {\n      addTodo(inputValue);\n      changeInputValue(\"\");\n    }\n  };\n\n  return (\n    <div className=\"add-todo\">\n      <input\n        type=\"text\"\n        onChange={e => changeInputValue(e.target.value)}\n        onKeyPress={enterPressed}\n        value={inputValue}\n        className=\"todo-input\"\n        ref={textInput}\n      />\n\n      <button\n        onClick={handleClick}\n        disabled={!inputValue}\n        className=\"todo-button\"\n      >\n        Add Todo\n      </button>\n    </div>\n  );\n};\n\nexport default AddTodo;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport AddTodo from \"../components/AddTodo\";\nimport { addTodo } from \"../actions/index\";\n\nconst AddTodoContainer = props => {\n  return <AddTodo {...props} />;\n};\n\nexport default connect(\n  undefined,\n  {\n    addTodo\n  }\n)(AddTodoContainer);\n","import React from \"react\";\nimport \"./TodoList.scss\";\n\nconst TodoList = ({ todos, toggleTodo }) => {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <li\n          key={todo.id}\n          onClick={() => toggleTodo(todo.id)}\n          style={{\n            textDecoration: todo.completed ? \"line-through\" : \"\"\n          }}\n          className=\"todo\"\n        >\n          {todo.text}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport TodoList from \"../components/TodoList\";\nimport { toggleTodo } from \"../actions/index\";\n\nconst filter = (name, todos) => {\n  if (name === \"completed\") {\n    return todos.filter(todo => todo.completed);\n  } else if (name === \"active\") {\n    return todos.filter(todo => !todo.completed);\n  } else {\n    return todos;\n  }\n};\n\nconst TodoListContainer = props => {\n  return <TodoList {...props} />;\n};\n\nconst mapStateToProps = state => {\n  return {\n    todos: filter(state.filter, state.todos)\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { toggleTodo }\n)(TodoListContainer);\n","import React from \"react\";\nimport \"./TodoFilters.scss\";\n\nconst TodoFilters = ({ setFilter, filter }) => {\n  return (\n    <div className=\"todo-filters\">\n      Show:\n      <button\n        className=\"all-button\"\n        onClick={() => setFilter(\"all\")}\n        style={{\n          background: filter === \"all\" ? \"#e0ccff\" : \"\"\n        }}\n      >\n        All\n      </button>\n      <button\n        className=\"active-button\"\n        onClick={() => setFilter(\"active\")}\n        style={{\n          background: filter === \"active\" ? \"#ff6666\" : \"\"\n        }}\n      >\n        Active\n      </button>\n      <button\n        className=\"completed-button\"\n        onClick={() => setFilter(\"completed\")}\n        style={{\n          background: filter === \"completed\" ? \"#80ff80\" : \"\"\n        }}\n      >\n        Completed\n      </button>\n    </div>\n  );\n};\n\nexport default TodoFilters;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport TodoFilters from \"../components/TodoFilters\";\nimport { setFilter } from \"../actions/index\";\n\nconst TodoFiltersContainer = props => {\n  return <TodoFilters {...props} />;\n};\n\nconst mapStateToProps = state => {\n  return {\n    filter: state.filter\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(TodoFiltersContainer);\n","import React from \"react\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { todoReducer } from \"../reducers/\";\nimport \"../App.css\";\nimport AddTodoContainer from \"../containers/AddTodo\";\nimport TodoListContainer from \"../containers/TodoList\";\nimport TodoFiltersContainer from \"../containers/TodoFilters\";\n\nconst store = createStore(\n  todoReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <AddTodoContainer />\n        <TodoListContainer />\n        <TodoFiltersContainer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}